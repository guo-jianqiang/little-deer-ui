{"version":3,"sources":["webpack:///../src/components/Test.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","of","ListView","__position","__code","__scope","Playground","Props","initList","i","push","id","Math","random","name","React","list","setList","onLoad","currentPage","Promise","resolve","reject","concat","setTimeout","map","item","index","key","isMDXComponent"],"mappings":"+QAQaA,G,UAAe,S,yMAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,YADR,YAGA,iBAAQ,CACN,GAAM,cADR,cAGA,YAAC,IAAD,CAAOC,GAAIC,IAAUF,QAAQ,UAC7B,iBAAQ,CACN,GAAM,eADR,eAGA,YAAC,IAAD,CAAYG,WAAY,EAAGC,OAAQ,oqBAAyqBC,SAAO,GACjtBN,QACAH,kBACAU,eACAC,UACAL,cALitB,gBAMjtBN,IANitB,EAOjtBH,eAPitB,GAQhtBO,QAAQ,eACZ,WAGK,IAFA,IAAIQ,EAAW,GAENC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAASE,KAAK,CACZC,GAAoB,IAAhBC,KAAKC,SACTC,KAAM,KAAuB,IAAhBF,KAAKC,WANrB,MAUuBE,WAAeP,GAAhCQ,EAVN,KAUYC,EAVZ,KAsBD,OAAO,YAAC,IAAD,CAAUC,OAVF,SAAAC,GACb,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAE3BL,EAAQD,EAAKO,OAAOf,IACpBgB,YAAW,WACT,OAAOH,GAAQ,KACd,SAI0BrB,QAAQ,YACnC,uBACGgB,EAAKS,KAAI,SAACC,EAAMC,GAAP,OAAiB,mBAAKC,IAAKD,GAAQD,EAAKZ,oB,uMASlEjB,EAAWgC,gBAAiB","file":"component---src-components-test-mdx-30571bda9450c728fb96.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/guojianqiang/Documents/my-project/docz-app-typescript/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport ListView from './ListView/index.ts';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"listview\"\n    }}>{`ListView`}</h1>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={ListView} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <Playground __position={1} __code={'() => {\\n  let initList = []\\n  for (let i = 0; i < 30; i++) {\\n    initList.push({\\n      id: Math.random() * 100,\\n      name: \\'测试\\' + Math.random() * 100,\\n    })\\n  }\\n  const [list, setList] = React.useState(initList)\\n  const onLoad = currentPage => {\\n    return new Promise((resolve, reject) => {\\n      //           message.info(\\'当前页：\\' + currentPage)\\n      setList(list.concat(initList))\\n      setTimeout(() => {\\n        return resolve(true)\\n      }, 500)\\n    })\\n  }\\n  return (\\n    <ListView onLoad={onLoad}>\\n      <div>\\n        {list.map((item, index) => (\\n          <div key={index}>{item.name}</div>\\n        ))}\\n      </div>\\n    </ListView>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ListView,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        let initList = [];\n\n        for (let i = 0; i < 30; i++) {\n          initList.push({\n            id: Math.random() * 100,\n            name: '测试' + Math.random() * 100\n          });\n        }\n\n        const [list, setList] = React.useState(initList);\n\n        const onLoad = currentPage => {\n          return new Promise((resolve, reject) => {\n            //           message.info('当前页：' + currentPage)\n            setList(list.concat(initList));\n            setTimeout(() => {\n              return resolve(true);\n            }, 500);\n          });\n        };\n\n        return <ListView onLoad={onLoad} mdxType=\"ListView\">\n              <div>\n                {list.map((item, index) => <div key={index}>{item.name}</div>)}\n              </div>\n          </ListView>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}