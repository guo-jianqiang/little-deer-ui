{"version":3,"sources":["webpack:///../src/components/ViewList.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","of","ListView","__position","__code","__scope","Playground","Props","initList","i","push","id","Math","random","name","React","list","setList","style","height","getList","data","API","params","Promise","resolve","console","log","setTimeout","refreshList","map","item","index","key","isMDXComponent"],"mappings":"4RAQaA,G,UAAe,S,6MAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,YADR,YAGA,iBAAQ,CACN,GAAM,cADR,cAGA,YAAC,IAAD,CAAOC,GAAIC,IAAUF,QAAQ,UAC7B,iBAAQ,CACN,GAAM,eADR,eAGA,YAAC,IAAD,CAAYG,WAAY,EAAGC,OAAQ,gzBAAmzBC,SAAO,GAC31BN,QACAH,kBACAU,eACAC,UACAL,cAL21B,gBAM31BN,IAN21B,EAO31BH,eAP21B,GAQ11BO,QAAQ,eACZ,WAGK,IAFA,IAAIQ,EAAW,GAENC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAASE,KAAK,CACZC,GAAoB,IAAhBC,KAAKC,SACTC,KAAM,KAAuB,IAAhBF,KAAKC,WANrB,MAUuBE,WAAeP,GAAhCQ,EAVN,KAUYC,EAVZ,KA2BD,OAAO,mBAAKC,MAAO,CACjBC,OAAQ,MAEN,YAAC,IAAD,CAAUC,QAlBC,SAAAC,GACbJ,EAAQ,GAAD,mBAAKD,GAAL,YAAcK,MAiBQC,IAVnB,SAAAC,GAAM,OAAI,IAAIC,SAAQ,SAAAC,GAChCC,QAAQC,IAAIJ,GACZK,YAAW,WACTH,EAAQjB,KACP,SAMoCqB,YAdrB,SAAAR,GAClBJ,EAAQ,YAAII,KAaqDrB,QAAQ,YACtE,uBACEgB,EAAKc,KAAI,SAACC,EAAMC,GAAP,OAAiB,mBAAKC,IAAKD,GAAQD,EAAKjB,KAAL,IAAgBkB,kB,2MAU3EnC,EAAWqC,gBAAiB","file":"component---src-components-view-list-mdx-1f46c6528f6af4bf2a8f.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/guojianqiang/Documents/my-project/little-deer-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport ListView from './ListView/index.ts';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"listview\"\n    }}>{`ListView`}</h1>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={ListView} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <Playground __position={1} __code={'() => {\\n  let initList = []\\n  for (let i = 0; i < 30; i++) {\\n    initList.push({\\n      id: Math.random() * 100,\\n      name: \\'测试\\' + Math.random() * 100,\\n    })\\n  }\\n  const [list, setList] = React.useState(initList)\\n  const onLoad = data => {\\n    setList([...list, ...data])\\n  }\\n  const refreshList = data => {\\n    setList([...data])\\n  }\\n  const API = params =>\\n    new Promise(resolve => {\\n      console.log(params)\\n      setTimeout(() => {\\n        resolve(initList)\\n      }, 1000)\\n    })\\n  return (\\n    <div style={{ height: 600 }}>\\n      <ListView getList={onLoad} API={API} refreshList={refreshList}>\\n        <div>\\n          {list.map((item, index) => (\\n            <div key={index}>{item.name + ` ${index}`}</div>\\n          ))}\\n        </div>\\n      </ListView>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ListView,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        let initList = [];\n\n        for (let i = 0; i < 30; i++) {\n          initList.push({\n            id: Math.random() * 100,\n            name: '测试' + Math.random() * 100\n          });\n        }\n\n        const [list, setList] = React.useState(initList);\n\n        const onLoad = data => {\n          setList([...list, ...data]);\n        };\n\n        const refreshList = data => {\n          setList([...data]);\n        };\n\n        const API = params => new Promise(resolve => {\n          console.log(params);\n          setTimeout(() => {\n            resolve(initList);\n          }, 1000);\n        });\n\n        return <div style={{\n          height: 600\n        }}>\n            <ListView getList={onLoad} API={API} refreshList={refreshList} mdxType=\"ListView\">\n             <div>\n              {list.map((item, index) => <div key={index}>{item.name + ` ${index}`}</div>)}\n              </div>\n            </ListView>\n          </div>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}