{"version":3,"sources":["webpack:///../src/components/DragSlider.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","of","DragSlider","__position","__code","__scope","Playground","Props","title","isMDXComponent"],"mappings":"mQAQaA,G,UAAe,S,+MAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,cADR,cAGA,iBAAQ,CACN,GAAM,cADR,cAGA,YAAC,IAAD,CAAOC,GAAIC,IAAYF,QAAQ,UAC/B,iBAAQ,CACN,GAAM,eADR,eAGA,YAAC,IAAD,CAAYG,WAAY,EAAGC,OAAQ,2kEAA+nEC,SAAO,GACvqEN,QACAH,kBACAU,eACAC,UACAL,gBALuqE,gBAMvqEN,IANuqE,EAOvqEH,eAPuqE,GAQtqEO,QAAQ,eACZ,WACK,OAAO,YAAC,IAAD,CAAYQ,MAAO,KAAMR,QAAQ,cAC9B,wwD,6MAgBlBH,EAAWY,gBAAiB","file":"component---src-components-drag-slider-mdx-c922bb4de18b1a9d72fc.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/guojianqiang/Documents/my-project/little-deer-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport DragSlider from './DragSlider/index.ts';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"dragslider\"\n    }}>{`DragSlider`}</h1>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={DragSlider} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <Playground __position={1} __code={'() => {\\n  return (\\n    <DragSlider title={\\'测试\\'}>\\n      <div>\\n        This API has been removed. If you\\'re looking for this functionality in\\n        Babel 7, you should import the \\'@babel/helper-module-imports\\' module\\n        and use the functions exposed from that module, such as \\'addNamed\\' or\\n        \\'addDefault\\'. in mobx 5, create-react-app This API has been removed.\\n        If you\\'re looking for this functionality in Babel 7, you should import\\n        the \\'@babel/helper-module-imports\\' module and use the functions\\n        exposed from that module, such as \\'addNamed\\' or \\'addDefault\\'. in mobx\\n        5, create-react-app This API has been removed. If you\\'re looking for\\n        this functionality in Babel 7, you should import the\\n        \\'@babel/helper-module-imports\\' module and use the functions exposed\\n        from that module, such as \\'addNamed\\' or \\'addDefault\\'. in mobx 5,\\n        create-react-app This API has been removed. If you\\'re looking for this\\n        functionality in Babel 7, you should import the\\n        \\'@babel/helper-module-imports\\' module and use the functions exposed\\n        from that module, such as \\'addNamed\\' or \\'addDefault\\'. in mobx 5,\\n        create-react-app This API has been removed. If you\\'re looking for this\\n        functionality in Babel 7, you should import the\\n        \\'@babel/helper-module-imports\\' module and use the functions exposed\\n        from that module, such as \\'addNamed\\' or \\'addDefault\\'. in mobx 5,\\n        create-react-app This API has been removed. If you\\'re looking for this\\n        functionality in Babel 7, you should import the\\n        \\'@babel/helper-module-imports\\' module and use the functions exposed\\n        from that module, such as \\'addNamed\\' or \\'addDefault\\'. in mobx 5,\\n        create-react-app This API has been removed. If you\\'re looking for this\\n        functionality in Babel 7, you should import the\\n        \\'@babel/helper-module-imports\\' module and use the functions exposed\\n        from that module, such as \\'addNamed\\' or \\'addDefault\\'. in mobx 5,\\n        create-react-app\\n      </div>\\n    </DragSlider>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      DragSlider,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        return <DragSlider title={'测试'} mdxType=\"DragSlider\">\n                  <div>\n                    This API has been removed. If you're looking for this functionality in Babel 7, you should import the '@babel/helper-module-imports' module and use the functions exposed from that module, such as 'addNamed' or 'addDefault'. in mobx 5, create-react-app\n                    This API has been removed. If you're looking for this functionality in Babel 7, you should import the '@babel/helper-module-imports' module and use the functions exposed from that module, such as 'addNamed' or 'addDefault'. in mobx 5, create-react-app\n                    This API has been removed. If you're looking for this functionality in Babel 7, you should import the '@babel/helper-module-imports' module and use the functions exposed from that module, such as 'addNamed' or 'addDefault'. in mobx 5, create-react-app\n                    This API has been removed. If you're looking for this functionality in Babel 7, you should import the '@babel/helper-module-imports' module and use the functions exposed from that module, such as 'addNamed' or 'addDefault'. in mobx 5, create-react-app\n                    This API has been removed. If you're looking for this functionality in Babel 7, you should import the '@babel/helper-module-imports' module and use the functions exposed from that module, such as 'addNamed' or 'addDefault'. in mobx 5, create-react-app\n                    This API has been removed. If you're looking for this functionality in Babel 7, you should import the '@babel/helper-module-imports' module and use the functions exposed from that module, such as 'addNamed' or 'addDefault'. in mobx 5, create-react-app\n                    This API has been removed. If you're looking for this functionality in Babel 7, you should import the '@babel/helper-module-imports' module and use the functions exposed from that module, such as 'addNamed' or 'addDefault'. in mobx 5, create-react-app\n                  </div>\n            </DragSlider>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}